openapi: 3.0.0
info:
  description: Simple delivery manager
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://localhost:8080/terms/
  title: Delivery API
  version: 1.0.0
servers:
- description: Production
  url: http://delivery-api.com
- description: Sandbox
  url: http://sandbox.delivery-api.com
paths:
  /product:
    delete:
      description: use to delete a product
      operationId: deleteProduct
      parameters:
      - explode: false
        in: header
        name: product-id
        required: false
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: Invalid product value
      security:
      - delivery_auth:
        - write:product
        - read:product
      summary: Delete a product
      tags:
      - v1/seller
      x-eov-operation-handler: controllers/V1SellerController
    post:
      description: Use to request to make available product
      operationId: addProduct
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        "405":
          description: Invalid input
      security:
      - delivery_auth:
        - write:product
        - read:deliveryPack
      summary: Add product to delivery
      tags:
      - v1/seller
      x-eov-operation-handler: controllers/V1SellerController
    put:
      description: Use to update products
      operationId: updateProduct
      requestBody:
        $ref: '#/components/requestBodies/Product'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
        "405":
          description: Validation exception
      security:
      - delivery_auth:
        - write:product
        - read:product
      summary: Update registry of products
      tags:
      - v1/seller
      x-eov-operation-handler: controllers/V1SellerController
  /product/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findProductByStatus
      parameters:
      - description: Status values that need to be considered for filter
        explode: true
        in: query
        name: status
        required: true
        schema:
          default:
          - available
          items:
            enum:
            - available
            - onCourse
            - delivered
            type: string
          type: array
        style: form
      - description: The number of items to skip before starting to collect the result
          set
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: The numbers of items to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                response:
                  value:
                    name: Pack1
                    type: box
                    color: none
                    size: 1m x 1m
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
          description: successful operation
        "400":
          description: Invalid status value
      security:
      - delivery_auth:
        - write:product
        - read:product
      summary: Finds Product by status
      tags:
      - v1/seller
      x-eov-operation-handler: controllers/V1SellerController
  /product/{productId}:
    get:
      description: Returns a product by ID
      operationId: getProductById
      parameters:
      - description: ID of product that needs to be fetched
        explode: false
        in: path
        name: productId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
      security:
      - ApiKeyAuth: []
      - delivery_auth:
        - write:product
        - read:product
      summary: Find product by ID
      tags:
      - v1/seller
      x-eov-operation-handler: controllers/V1SellerController
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
      responses:
        default:
          description: successful operation
      summary: Create user
      tags:
      - user
      x-eov-operation-handler: controllers/UserController
  /user/login:
    get:
      operationId: loginUser
      parameters:
      - description: The user name for login
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: The password for login in clear text
        explode: true
        in: query
        name: password
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
          description: successful operation
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
      x-eov-operation-handler: controllers/UserController
  /user/logout:
    get:
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      summary: Logs out current logged in user session
      tags:
      - user
      x-eov-operation-handler: controllers/UserController
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
      - user
      x-eov-operation-handler: controllers/UserController
    get:
      operationId: getUserByName
      parameters:
      - description: 'The name that needs to be fetched. Use user1 for testing. '
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
      x-eov-operation-handler: controllers/UserController
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: name that need to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      summary: Updated user
      tags:
      - user
      x-eov-operation-handler: controllers/UserController
components:
  requestBodies:
    Product:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'
      description: Pet object that needs to be added to the store
  schemas:
    User:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: active
        role: seller
        phone: phone
        id: 0
        email: email
        username: username
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          description: User Status
          enum:
          - active
          - unactive
          type: string
        role:
          description: User Status
          enum:
          - seller
          - postman
          - aministrator
          type: string
    Product:
      example:
        photoUrls:
        - photoUrls
        - photoUrls
        nickName: promo1
        name: smartphone
        id: 0
        category:
          name: name
          description: description
          id: 6
        status: available
      properties:
        id:
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        nickName:
          example: promo1
          type: string
        name:
          example: smartphone
          type: string
        photoUrls:
          items:
            type: string
          type: array
        status:
          description: pet status in the store
          enum:
          - available
          - onCourse
          - delivered
          type: string
      required:
      - name
    Address:
      properties:
        id:
          type: integer
        address1:
          type: string
        detail:
          type: string
        postalCode:
          type: string
    Category:
      example:
        name: name
        description: description
        id: 6
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    DeliveryPack:
      properties:
        id:
          type: integer
        address:
          $ref: '#/components/schemas/Address'
        products:
          $ref: '#/components/schemas/Product'
        searchCode:
          example: DUFVNSDVSDV4543V21S3V
          type: string
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          type: string
        complete:
          type: boolean
      required:
      - address
      - name
      - products
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
    ApiKeyAuth:
      in: header
      name: X-API-KEY
      type: apiKey
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
    delivery_auth:
      flows:
        implicit:
          authorizationUrl: http://product.swagger.io/api/oauth/dialog
          scopes:
            write:product: modify product in your account
            write:deliveryPack: modify pack in your account
            write:address: modify address in your account
            read:deliveryPack: read your pack
            read:product: read your products
      type: oauth2
